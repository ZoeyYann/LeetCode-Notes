Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:
The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.
A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.
A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.
A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.
A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.
A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).
The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.
CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.
基本思路：类似于括号表达式 遇到</>就 pop,然后看是不是匹配
class Solution {
public:
    bool isValid(string code) {
        stack<string> stk;
        for(int i=0;i<code.size();){
            if (i > 0 && stk.empty()) return false;//违反规则1
            if(code.substr(i, 9) == "<![CDATA["){
                int j=i+9;
                i=code.find("]]>",j);
                if(i==string::npos ) return false;
                i+=3;
            }
            else if(code.substr(i,2)=="</"){
                int j=i+2;
                i=code.find(">",j);
                if(i==string::npos ||i==j || i-j>9) return false;  //找不到标签的>或者没有标签名 或者长>9
                for(int t=j;t<i;t++) if(!isupper(code[t])) return false;  //检查大写 islower() 不等于!isupper
                if(stk.empty()) return false; // 没有对应的起始标签；
                if(code.substr(j,i-j)!=stk.top()) return false;  //起始名字不一样
                stk.pop();
                i++;
            }
            else if(code.substr(i, 1) == "<"){
                int j=i+1;
                i=code.find(">",j);
                if(i==string::npos ||i==j || i-j>9) return false;
                for(int t=j;t<i;t++) if(!isupper(code[t])) return false;  //检查大写
                stk.push(code.substr(j,i-j));
                i++;
            }
            else i++;
        }
        return stk.empty();
    }
};
