Q：动态规划和DFS的区别在哪里？为什么能提高效率？
DFS就是遍历(效率指数级，因为并没有减小问题规模)：因此一般是对array元素的存在进行讨论，然后递归遍历整个数组。比如全排列问题，比如组合问题。
DP则是分解子问题，减小子问题的规模（可能可以达到对数级，或者指数级）：因此对限定值S进行讨论，比如S-array[n] 的值是什么。
通过讨论S的前一值，建立DP表格，削减S，通过保存S的前一值来降低复杂度，得出最终结果。

Q：动态规划怎么实现
  Top-Down: 递归实现（问题依赖于子问题的解）
  Bottom-Up:迭代实现 （子问题影响所有包含它的问题）
  可以先用迭代的思路构思，再用递归的方法实现
Q：那么DFS和DP和贪心算法的共性和区别是什么？
贪心法是动态规划法的特例，如0-1背包，最小代价生成树（prim算法和cruskal算法），huffman算法，以及地杰斯特拉算法。
动态规划法是一种方法，注意和算法的区别。如多段图问题，备忘录方法，弗洛伊德算法，最长公共子序列问题
回溯法是比动态规划法更加一般的算法，如n皇后，子集和数问题

Q：子问题的最优解不确定怎么办？
   分情况，多开几个数组存储，最后从几种情况里挑出最优解
   比如 robber问题，maximum Product Array
   // f[i] means maximum product that can be achieved ending with i
   // g[i] means minimum product that can be achieved ending with i
  public class Solution {
  public int maxProduct(int[] A) {
    if (A == null || A.length == 0) {
        return 0;
    }
    int[] f = new int[A.length];
    int[] g = new int[A.length];
    f[0] = A[0];
    g[0] = A[0];
    int res = A[0];
    for (int i = 1; i < A.length; i++) {
        f[i] = Math.max(Math.max(f[i - 1] * A[i], g[i - 1] * A[i]), A[i]); //现在这个元素乘上f[i-1] 或乘上g[i-1]不知道会变大还是变小
        g[i] = Math.min(Math.min(f[i - 1] * A[i], g[i - 1] * A[i]), A[i]);
        res = Math.max(res, f[i]);
    }
    return res;
  }
}
