You are given the each item's price, a set of special offers, and the number we need to buy for each item. 
The job is to output the lowest price you have to pay where you could make optimal use of the special offers.
Note:
There are at most 6 kinds of items, 100 special offers.
For each item, you need to buy at most 6 of them.
You are not allowed to buy more items than you want, even if that would lower the overall price.
// 思路： DFS 并且开辟数组记录中间值（记录中间值时由于不知道空间大小，使用map）
// 将每一种特定的need组合（即商品组合）转换成数字，存入map,数字的每一位代表对应商品需要购买的数量
// 比较购买多一个valid offer(不valid 不用计算) 以及 不购买多一个之间的最小值
// 关于offer的组合可能会重复计算 但是已经存储过了所以没关系
Example 1:
Input: [2,5], [[3,0,5],[1,2,10]], [3,2]
Output: 14
Explanation: 
There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
In special offer 1, you can pay $5 for 3A and 0B
In special offer 2, you can pay $10 for 1A and 2B. 
You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.
//!  注意转换的时候从i=0开始，不要从i=n-1 开始，那样变成了逆序！
class Solution {
public: 
    unordered_map<int,int> m;
    int get_key(const vector<int> &needs){
        int res=0;
        for(int i=0;i<needs.size();i++){
            res=res*10+needs[i];
        }
        return res;
    }
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return dfs(price,special,get_key(needs));
    }
    int dfs(vector<int> &price,const vector<vector<int>> &special,int key){
        if(m.find(key) != m.end()) return m[key];
        int n=price.size();
        vector<int> needs(n,0); //将key分解为needs
        int priceWithoutOffer=0;
        for(int tmp=key,q=n-1;tmp>0;tmp/=10,q--){
            needs[q]= tmp%10;
            priceWithoutOffer += needs[q]*price[q];
        }
        int res=priceWithoutOffer;
        for(auto spe:special){
            int newKey=0;  // 买了某一个offer后剩下需要购买的商品额
            int i=0;
            for(;i<n;i++){
                if(spe[i] > needs[i]) break; // 这个offer提供的商品数量超出预期，不考虑
                newKey = newKey*10 + needs[i] - spe[i];
            }
            if(i==n) //这个offer可以有
                res=min(res,spe[n]+dfs(price,special,newKey));//不要直接return!
        }
        m[key]=res;
        return res;
        
    }
};
