／* 如果下层(Called Function)会改变上层(Calling Function)的值或者状态，利用stack.top()来改变
   例子：636. Exclusive Time of Functions 计算下层的interval,下层加上间隔，上层减去相应的间隔
   394. Decode String 内层字符串的改变会导致上层字符串的改变，只需加到上层字符串的后面即可
*／
／* General Idea: stack中通常储存的是待处理的结点，每一个结点通常被只被处理一次
*／
636. Exclusive Time of Functions
struct Log {
    int id;
    string status;
    int timestamp;
};

class Solution {
public:
    vector<int> exclusiveTime(int n, vector<string>& logs) {
        vector<int> times(n, 0);
        stack<Log> st;
        for(string log: logs) {
            stringstream ss(log);
            string temp, temp2, temp3;
            getline(ss, temp, ':');
            getline(ss, temp2, ':');
            getline(ss, temp3, ':');

            Log item = {stoi(temp), temp2, stoi(temp3)};
            if(item.status == "start") {
                st.push(item);
            } else {
                assert(st.top().id == item.id);

                int time_added = item.timestamp - st.top().timestamp + 1;
                times[item.id] += time_added;
                st.pop();

                if(!st.empty()) {//注意非空
                    assert(st.top().status == "start");
                    times[st.top().id] -= time_added;
                }
            }
        }

        return times;
    }
};
394. Decode String
class Solution {
public:
    string decodeString(string s) {
        int i=0;
        stack<string> chars;
        stack<int>nums;
        int num=0;
        string res="";
        for(auto c:s){
            if(isdigit(c)){
                num=10*num+(c-'0');
            }else if(c=='['){
                chars.push(res); //待处理
                nums.push(num);
                num=0;
                res="";
            }else if(isalpha(c)){
                res.push_back(c);
            }else if(c==']'){
                int n=nums.top();
                string tmp="";
                while(n--) tmp+=res; //res 是当前括号里的字符串，tmp是重复k 次后
                res=tmp;             
                res=chars.top()+res;   //当层字符串改变了，上层也改变了，由于遍历顺序是从左到右，只需要加到后面
                chars.pop(); nums.pop();
            }        
    }
        return res;
        
    }
};

385. Mini Parser
Given s = "[123,[456,[789]]]",
Return a NestedInteger object containing a nested list with 2 elements:
1. An integer containing value 123.
2. A nested list containing two elements:
    i.  An integer containing value 456.
    ii. A nested list with one element:
         a. An integer containing value 789.      
/*  和Decode String 不一样！Decode String 在[之前还有别的字符，而这个nested list 直接以'[' 开始
    如果遇到'['，我们给栈中加上一个空的NestInteger，如果遇到的字符数逗号或者']'，如果i>start，那么我们给栈顶元素调用add来新加一个NestInteger
*/
class Solution {
    //为了防止负数用 substr 不要用整数++
public:
    NestedInteger deserialize(string s) {
        if (s.empty()) return NestedInteger();
        if (s[0] != '[') return NestedInteger(stoi(s));
        stack<NestedInteger> st;
        int start = 1;
        for (int i = 0; i < s.size(); ++i) {
            if (s[i] == '[') {
                st.push(NestedInteger());
                start = i + 1;
            } else if (s[i] == ',' || s[i] == ']') {
                if (i > start) {
                    st.top().add(NestedInteger(stoi(s.substr(start, i - start))));
                }
                start = i + 1;
                if (s[i] == ']') {
                    if (st.size() > 1) {
                        NestedInteger t = st.top(); st.pop();
                        st.top().add(t);
                    }
                }
            }
        }
        return st.top();
    }
};
503. Next Greater Element II
//Given a circular array (the next element of the last element is the first element of the array), print the Next Greater Number 
//for every element. The Next Greater Number of a number x is the first greater number to its traversing-order next in the array,
//which means you could search circularly to find its next greater number. If it doesn't exist, output -1 for this number.
// 思路：用stack 把每一个元素之前比它小的元素全部弹出
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n=nums.size();
        vector<int> next(n,-1);
        stack<int> stk;// stack存储索引
        for(int i=0;i<n*2;i++){
            int num=nums[i%n];
            while(!stk.empty() && num>nums[stk.top()]){
                next[stk.top()]=num;
                stk.pop();    //留在stack里的都还没有找到next greatest
            }
            if(i<n)  stk.push(i);//后面遍历的一圈只是为了找最大值 不用再入栈
        }
        return next;
    }
};

341. Flatten Nested List Iterator
//思路：类似树的深度遍历过程，如果不是interger，压入栈，记得压入栈的顺序
Given a nested list of integers, implement an iterator to flatten it.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.

Example 1:
Given the list [[1,1],2,[1,1]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].

Example 2:
Given the list [1,[4,[6]]],

By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
private:stack<NestedInteger> nodes;
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        int size = nestedList.size();
        for(int i = size - 1; i >= 0; --i) {
            nodes.push(nestedList[i]);  //后面的压在栈底
        }
    }

    int next() {
        int result = nodes.top().getInteger();
        nodes.pop();
        return result;
    }

    bool hasNext() {
       while(!nodes.empty()){
        NestedInteger topNode=nodes.top();
        if(topNode.isInteger()) return true; //不要改变栈 等到调用next再返回
        nodes.pop();
        vector<NestedInteger>& adjs = topNode.getList(); //类似树往下生长的过程，这里不是二叉树是多叉树
        int size = adjs.size();
        for(int i = size - 1; i >= 0; --i) {
            nodes.push(adjs[i]);
        }
       } 
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
 
 
