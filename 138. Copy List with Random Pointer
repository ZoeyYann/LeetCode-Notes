138. Copy List with Random Pointer
难点：刚开始题目没看懂，深拷贝意思是新的链表每个结点都是新申请的内存空间，不能复用之前的结点，但是结构一致
思路一：用unordered_map(hashmap) 空间 O(n)
思路二：遍历三次
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.
Return a deep copy of the list.
第一遍，对每个node进行复制，并插入其原始node的后面，新旧交替，变成重复链表。如：原始：1->2->3->null，复制后：1->1->2->2->3->3->null
第二遍，遍历每个旧node，把旧node的random的复制给新node的random，因为链表已经是新旧交替的。所以复制方法为：

                                      node.next.random = node.random.next
             前面是说旧node的next的random，就是新node的random，后面是旧node的random的next，正好是新node，是从旧random复制来的。
第三遍，则是把新旧两个表拆开，返回新的表即可。
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(!head) return NULL;
        RandomListNode *iter= head,*next;
        while(iter){
            next=iter->next;
            iter->next=new RandomListNode(iter->label);
            iter->next->next=next;
            iter=next;
        }
        iter=head; //只要每次赋值给head就可以重新遍历
        while(iter && iter->next){
            next=iter->next->next;
            if(iter->random)
                iter->next->random=iter->random->next;
            iter=next;
        }
        iter=head;
        RandomListNode *pseudoH= new RandomListNode(-1),*tail=pseudoH;
        while(iter&&iter->next){
            next=iter->next->next;
            
            auto copy=iter->next;
            tail->next=copy;
            tail=tail->next;     // restore the original list
            
            iter->next=next;
            iter=next;
        }
        return pseudoH->next;
    }
};
